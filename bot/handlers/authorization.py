import json
import logging
from datetime import datetime

import httpx
from fastapi.requests import Request
from fastapi.responses import RedirectResponse, Response
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ChatType
from telegram.ext import CallbackContext, CommandHandler

from bot import application
from bot.config import get_settings
from bot.filters import HasUserInArgsFilter
from bot.services import user as user_service
from bot.services.auto_delete import auto_delete
from bot.utils.user_api_keys import decode_payload, generate_auth_url, generate_nonce

logger = logging.getLogger(__name__)


async def auth_redirect_callback(request: Request) -> Response:
    """
    Callback for discourse auth. Redirected from Mirea Ninja with a param a ?payload=[the API KEY].
    """
    payload = request.query_params.get("payload")

    private_key: str = application.bot_data["private_key"]

    bot_deeplink_url = f"https://t.me/{application.bot.username}?start="

    if not payload:
        return RedirectResponse(url=f"{bot_deeplink_url}–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

    payload = json.loads(decode_payload(payload, private_key))
    key, nonce = payload["key"], payload["nonce"]

    user = await user_service.get_by_discourse_nonce(nonce)

    if not user:
        return RedirectResponse(url=f"{bot_deeplink_url}–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"{get_settings().DISCOURSE_URL}/session/current.json",
            headers={"User-Api-Key": key},
        )

        if response.status_code != 200:
            return RedirectResponse(url=f"{bot_deeplink_url}–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

        session = response.json()

    discourse_id = session["current_user"]["id"]

    await user_service.update_discourse_data(user.id, discourse_id, key)

    return RedirectResponse(url=f"{bot_deeplink_url}–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω")


async def auth_deeplink_callback(update: Update, context: CallbackContext) -> None:
    if not update.effective_message:
        return

    if update.effective_chat.type != ChatType.PRIVATE:
        msg = await update.effective_message.reply_text("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞.")
        auto_delete(msg, context, from_message=update.effective_message)
        return

    user = await user_service.get_by_id(update.effective_user.id)

    if not user:
        return

    if "auth" in update.effective_message.text:
        await auth(update, context)
        return

    if "–û—à–∏–±–∫–∞" in update.effective_message.text:
        await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    logger.info("User %s has successfully authenticated", user.id)
    await update.effective_message.reply_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç Mirea Ninja —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É.")


async def auth(update: Update, context: CallbackContext) -> None:
    if not get_settings().RUN_WITH_WEBHOOK:
        await update.effective_message.reply_text(
            "‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /auth. \n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
        )
        return

    if update.effective_chat.type != ChatType.PRIVATE:
        button = InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏", url=f"https://t.me/{application.bot.username}?start=auth")
        keyboard = InlineKeyboardMarkup([[button]])
        msg = await update.effective_message.reply_text(
            "‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞.", reply_markup=keyboard
        )
        auto_delete(msg, context, from_message=update.effective_message)
        return

    user = await user_service.get_by_id(update.effective_user.id)

    if not user:
        return

    if user.discourse_id:
        await update.effective_message.reply_text("‚úÖ –í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫ –±–æ—Ç—É.")
        return

    nonce = generate_nonce()
    await user_service.set_discourse_nonce(update.effective_user.id, nonce)
    auth_url = generate_auth_url(update.effective_user.id, context.bot_data["public_key"], nonce)

    button = InlineKeyboardButton(
        "üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
        url=auth_url,
    )
    keyboard = InlineKeyboardMarkup.from_button(button)

    await update.effective_message.reply_text(
        "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Mirea Ninja –∫ –±–æ—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=keyboard,
    )


async def whois(update: Update, context: CallbackContext) -> None:
    msg = update.effective_message

    if msg.reply_to_message:
        from_user_id = msg.reply_to_message.from_user.id
        user = await user_service.get_by_id(from_user_id)
    elif HasUserInArgsFilter().filter(msg):
        username = context.args[0].replace("@", "").strip()
        user = await user_service.get_by_username(username)
    else:
        new_message = await msg.reply_text("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—å –µ–≥–æ!")
        auto_delete(new_message, context, from_message=msg)
        return

    if not user:
        new_message = await msg.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        auto_delete(new_message, context, from_message=msg)
        return

    if not user.discourse_id:
        new_message = await msg.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫ –±–æ—Ç—É.")
        auto_delete(new_message, context, from_message=msg)
        return

    async with httpx.AsyncClient() as client:
        headers = {
            "Api-Key": get_settings().DISCOURSE_API_KEY,
            "Api-Username": "system",
        }

        response = await client.get(f"{get_settings().DISCOURSE_URL}/admin/users/{user.discourse_id}.json", headers=headers)

        if response.status_code != 200:
            logger.error("Failed to get user info from Mirea Ninja: %s", response.text)
            new_message = await msg.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            auto_delete(new_message, context, from_message=msg)
            return

        data = response.json()

        if not data["id"]:
            new_message = await msg.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            auto_delete(new_message, context, from_message=msg)
            return

        admin_text = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if data["admin"] else ""
        moderator_text = "üî® –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä" if data["moderator"] else ""
        created_at = datetime.fromisoformat(data["created_at"].replace("Z", "+00:00"))
        created_at_text = created_at.strftime("%d.%m.%Y %H:%M:%S")

        text = (
            f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user['username']}:\n\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at_text}\n"
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['post_count']}\n"
            f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤: {data['like_count']}\n"
            f"üìä –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {data['trust_level']}\n"
            f"{admin_text} {moderator_text}"
        )

        await msg.reply_text(text)


application.add_handler(CommandHandler("start", auth_deeplink_callback), group=1)
application.add_handler(CommandHandler(["auth", "connect", "link"], auth), group=1)
application.add_handler(CommandHandler("whois", whois), group=1)
