import logging
from bot import config
from telegram import Message, ParseMode, Update
from telegram.ext import CallbackContext
from bot.handlers.users import users_updater
from bot.models.reputation_update import ReputationUpdate
from bot.models.user import User
from bot.services.auto_delete import auto_delete


from bot.services.reputation import compute_force, compute_rep, get_rating

logger = logging.getLogger(__name__)


def reputation_callback(update: Update, context: CallbackContext) -> None:
    if context.reputation:
        message = update.effective_message

        from_user_id = message.from_user.id
        to_user_id = message.reply_to_message.from_user.id

        from_user = User.get(from_user_id)
        to_user = User.get(to_user_id)

        if from_user is None or to_user is None:
            users_updater(update, context)
            from_user = User.get(from_user_id)
            to_user = User.get(to_user_id)

        if from_user.update_reputation_at:
            if from_user.is_rep_change_available() is False:
                new_message = message.reply_text(
                    '‚ùå –†–µ–ø—É—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç!')
                auto_delete(new_message, context)
                return

        if ReputationUpdate.is_user_send_rep_to_message(from_user_id, message.reply_to_message.message_id):
            new_message = message.reply_text(
                '‚ùå –í—ã —É–∂–µ –∏–∑–º–µ–Ω—è–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
            auto_delete(new_message, context)
            return

        reputation_change = context.reputation[0]['reputation_change']

        new_user_rep_delta = compute_rep(reputation_change, from_user.force)
        new_user_force_delta = compute_force(
            reputation_change, from_user.force)

        new_user_force = round(to_user.force + new_user_force_delta, 3)
        new_user_rep = round(to_user.reputation + new_user_rep_delta, 3)

        User.update_rep_and_force(
            from_user_id, to_user_id, new_user_rep, new_user_force)

        ReputationUpdate(message_id=message.reply_to_message.message_id, from_user_id=from_user_id, to_user_id=to_user_id, reputation_delta=new_user_rep_delta,
                         force_delta=new_user_force_delta, new_reputation=new_user_rep, new_force=new_user_force).create()

        from_username = message.from_user.first_name
        to_username = message.reply_to_message.from_user.first_name

        new_user_rep_delta = round(new_user_rep_delta, 3)
        new_rep = '+' + \
            str(new_user_rep_delta) if new_user_rep_delta > 0 else str(
                new_user_rep_delta)

        icon = 'üëé' if reputation_change < 0 else 'üëç'

        logger.info(
            f'{from_username} has updated {to_username} reputation {new_rep}')

        new_message = context.bot.send_message(message.chat_id,
                                               f"{icon} *{from_username}* ({from_user.reputation}, {from_user.force}) "
                                               f"–æ–±–Ω–æ–≤–∏–ª(–∞) –≤–∞–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é ({new_rep})",
                                               reply_to_message_id=message.reply_to_message.message_id, parse_mode=ParseMode.MARKDOWN)
        auto_delete(new_message, context)


def show_leaders_callback(update: Update, context: CallbackContext) -> None:
    new_message = update.effective_message.reply_text(
        get_rating(User.get_by_rating()), parse_mode=ParseMode.MARKDOWN)

    auto_delete(new_message, context, from_message=update.effective_message)


def show_self_rating_callback(update: Update, context: CallbackContext) -> None:
    user = User.get(update.effective_message.from_user.id)

    new_message = update.effective_message.reply_text(update.effective_message.from_user.first_name +
                                                      ', —É –≤–∞—Å {} —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ {} –æ—á–∫–æ–≤ –≤–ª–∏—è–Ω–∏—è'.format(user.reputation, user.force))

    auto_delete(new_message, context, from_message=update.effective_message)


def about_rating_callback(update: Update, context: CallbackContext) -> None:
    new_message = update.effective_message.reply_text(
        '*–†–µ–ø—É—Ç–∞—Ü–∏—è* - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ß–µ–º –≤—ã—à–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—è, —Ç–µ–º –±–æ–ª—å—à–µ –≤–∫–ª–∞–¥–∞ –≤—ã –≤–Ω–µ—Å–ª–∏ –≤ –æ–±—â–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥–µ Mirea Ninja.\n\n*–í–ª–∏—è–Ω–∏–µ* - —ç—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—à –≥–æ–ª–æ—Å —Å–∏–ª–µ–Ω. –°–∏–ª–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç—Å—è –≤—Å–ª–µ–¥ –∑–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π, –Ω–æ –Ω–µ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –Ω–µ–π.', parse_mode=ParseMode.MARKDOWN)

    auto_delete(new_message, context, from_message=update.effective_message)
